<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hello.capstone.repository.ManagerMapper">
   
	<insert id = "noticeCreate">
		insert into 
		
		notice(title, content, noticedate) 
		
		values( #{title}, #{content}, #{noticeDate}  );
	</insert>
	
	
	<select id = "noticeRead" resultType ="Notice">
		select *
		
		from notice
		
		where noticeidx = #{noticeIdx} and title = #{title};
	</select>
	
	<update id="noticeUpdate">
		update notice

		set title = #{title}, content = #{content}, noticedate =#{noticeDate}, noticemodify = #{noticeModify}
		
		where noticeidx = #{noticeIdx}
	</update>
	
	<delete id ="noticeDelete">
		delete
		
		from notice
		
		where noticeidx = #{noticeIdx}
	</delete>
	
	<select id = "noticeReadAll" resultType ="Notice">
		select *
		
		from notice
		
		order by noticedate;
	</select>
	
	<select id ="noticeGetAlarm" resultType ="Map">
		select * from  notice
		where noticedate &gt;= DATE_SUB(NOW(), INTERVAL 24 HOUR);;
	</select>
	
	
	<select id="getMemberByRole">
    	select * 
        from member
        where role = #{role}
        order by name asc;;
   	</select>
   	
    <select id="getFailedReservation" resultType = "Reservation">
		select *
		from reservation
		where memberidx = #{memberIdx} and confirm = 'false';
	</select>
	
	<select id = "getFailedItems" resultType = "Item">
		select *
		from item
		where itemidx in 
		(select itemidx from reservation where confirm = 'false' and shopidx = #{shopIdx});
	</select>
   	
   	
   	<select id = "getShopinfoByBusiness">
   		select *
   		from shop
   		where owneridx = #{owneridx}
   		order by shopname asc;
   	</select>
   	
   	<select id = "getIteminfoByBusiness">
   		select *
   		from item
   		where shopidx = #{shopidx}
   		order by itemname asc;
   	</select>
   	
   	<select id = "getShopinfo">
   		select *
   		from shop
 		order by shopname asc;
   	</select>
   	
   	<select id="getIteminfo" resultType="map">
		select i.*,
		       count(r.memberidx) as Reservation_client,
		       sum(case when r.confirm &lt;&gt; 'false' then r.number else 0 end) as reservation_number,
		       CASE 
		           WHEN i.endtime &lt;= NOW() THEN '마감' 
		           ELSE '진행중' 
			   END AS status 
		from item as i
		left join reservation as r
		on i.itemidx = r.itemidx
		where i.shopidx = 3
		group by i.itemidx
		order by i.itemname asc;
   	</select>
   	
   	<select id="getReservationClient" resultType="map">
   		select m.*,
		       r.number as  reservation_number,
		       r.confirm
		from member as m
		left join reservation as r
		on m.memberidx = r.memberidx
		where r.itemidx = #{itemidx}
		order by m.name asc;
   	</select>
   	
   	<select id="getRatingNumber" resultType="map">
	   	SELECT r.rating, COALESCE(COUNT(rt.rating), 0) as rating_count
		FROM (
			    SELECT 0 AS rating
			    UNION ALL SELECT 1
			    UNION ALL SELECT 2
			    UNION ALL SELECT 3
			    UNION ALL SELECT 4
			    UNION ALL SELECT 5
			) AS r
		LEFT JOIN ratings AS rt 
		ON r.rating = rt.rating AND rt.shopidx = #{shopidx}
		GROUP BY r.rating
		ORDER BY r.rating;
   	</select>
   	
   	<select id="getRatingClient" resultType="map">
   		select m.* 
		from member as m
		left join ratings as r
		on m.memberidx = r.memberidx
		where r.rating = #{rating} and r.shopidx = #{shopidx}
		order by m.name asc;
   	</select>
   	
   	<select id="getReservationMember" resultType="Member">
   		select m.* from member as m
		left join reservation as r
		on m.memberidx = r.memberidx
		where r.shopidx = #{shopidx} and r.confirm = "true";
   	</select>
   	
   		<select id = "getItemAll" resultType ="Map">
		select i.*, s.shopname
		from item i
		inner join shop s on i.shopidx = s.shopidx
		order by i.itemname asc , i.starttime asc;
	
	</select>
	
	
	<select id ="searchMemberByName">
		select *
		from member
		where name like concat('%', #{name}, '%')
		order by name asc, redate asc;
	
	</select>
	
	<select id="searchShopByName">
		select s.*, m.name
		from shop s
		inner join member m
		on s.owneridx = m.memberidx
		where s.shopname like concat('%', #{shopName}, '%')
		order by s.shopname asc, s.registrationDate asc;
	
	</select>
	
	<select id="searchItemByName">
		select i.*, s.shopname
		from item i
		inner join shop s
		on i.shopidx = s.shopidx
		where i.itemname like concat('%', #{itemName}, '%')
		order by i.itemname asc, i.starttime asc;
	
	</select>
   	
</mapper>